// Copyright 2020 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package opsmngr

import (
	"fmt"
	"net/http"
	"testing"

	"github.com/go-test/deep"
)

func TestAgents_ListAgentAPIKeys(t *testing.T) {
	client, mux, teardown := setup()

	defer teardown()
	projectID := "5e66185d917b220fbd8bb4d1"
	mux.HandleFunc(fmt.Sprintf("/groups/%s/agentapikeys", projectID), func(w http.ResponseWriter, r *http.Request) {
		_, _ = fmt.Fprint(w, `
						[{
						  "_id" : "1",
						  "createdBy" : "PUBLIC_API",
						  "createdIpAddr" : "1",
						  "createdTime" : 1520458807291,
						  "createdUserId" : "21",
						  "desc" : "Agent API Key for this project",
						  "key" : "****************************8b87"
						}, {
						  "_id" : "2",
						  "createdBy" : "PROVISIONING",
						  "createdTime" : 1508871142864,
						  "desc" : "Generated by Provisioning",
						  "key" : "****************************39fe"
						}, {
						  "_id" : "3",
						  "createdBy" : "USER",
						  "createdIpAddr" : "1",
						  "createdTime" : 1507067499083,
						  "createdUserId" : "21",
						  "desc" : "Initial API Key",
						  "key" : "****************************70d7"
						}]
		`)
	})

	agentAPIKeys, _, err := client.Agents.ListAgentAPIKeys(ctx, projectID)
	if err != nil {
		t.Fatalf("Agents.ListAgentAPIKeys returned error: %v", err)
	}

	CreatedUserID := "21"
	CreatedIPAddr := "1"

	expected := []*AgentAPIKey{
		{
			ID:            "1",
			Key:           "****************************8b87",
			Desc:          "Agent API Key for this project",
			CreatedTime:   1520458807291,
			CreatedUserID: &CreatedUserID,
			CreatedIPAddr: &CreatedIPAddr,
			CreatedBy:     "PUBLIC_API",
		},
		{
			ID:          "2",
			Key:         "****************************39fe",
			Desc:        "Generated by Provisioning",
			CreatedTime: 1508871142864,
			CreatedBy:   "PROVISIONING",
		},
		{
			ID:            "3",
			Key:           "****************************70d7",
			Desc:          "Initial API Key",
			CreatedTime:   1507067499083,
			CreatedUserID: &CreatedUserID,
			CreatedIPAddr: &CreatedIPAddr,
			CreatedBy:     "USER",
		},
	}

	if diff := deep.Equal(agentAPIKeys, expected); diff != nil {
		t.Error(diff)
	}
}

func TestAgents_CreateAgentAPIKey(t *testing.T) {
	client, mux, teardown := setup()
	defer teardown()
	projectID := "5e66185d917b220fbd8bb4d1"
	mux.HandleFunc(fmt.Sprintf("/groups/%s/agentapikeys", projectID), func(w http.ResponseWriter, r *http.Request) {
		_, _ = fmt.Fprint(w, `{
						  "_id" : "1",
						  "createdBy" : "PUBLIC_API",
						  "createdIpAddr" : "1",
						  "createdTime" : 1520458807291,
						  "createdUserId" : "21",
						  "desc" : "TEST",
						  "key" : "****************************8b87"
						}`)
	})

	agentRequest := &AgentAPIKeysRequest{Desc: "TEST"}
	agentAPIKey, _, err := client.Agents.CreateAgentAPIKey(ctx, projectID, agentRequest)

	if err != nil {
		t.Fatalf("Agents.CreateAgentAPIKey returned error: %v", err)
	}

	CreatedUserID := "21"
	CreatedIPAddr := "1"

	expected := &AgentAPIKey{
		ID:            "1",
		Key:           "****************************8b87",
		Desc:          "TEST",
		CreatedTime:   1520458807291,
		CreatedUserID: &CreatedUserID,
		CreatedIPAddr: &CreatedIPAddr,
		CreatedBy:     "PUBLIC_API",
	}

	if diff := deep.Equal(agentAPIKey, expected); diff != nil {
		t.Error(diff)
	}
}
func TestAgents_DeleteAgentAPIKey(t *testing.T) {
	client, mux, teardown := setup()

	defer teardown()
	projectID := "5e66185d917b220fbd8bb4d1"
	agentAPIKey := "1"
	mux.HandleFunc(fmt.Sprintf("/groups/%s/agentapikeys/%s", projectID, agentAPIKey), func(w http.ResponseWriter, r *http.Request) {
		testMethod(t, r, http.MethodDelete)
	})

	_, err := client.Agents.DeleteAgentAPIKey(ctx, projectID, agentAPIKey)
	if err != nil {
		t.Fatalf("Agents.DeleteAgentAPIKey returned error: %v", err)
	}
}
